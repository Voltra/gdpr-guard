{"version":3,"file":"gdpr_guard.js","mappings":"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","sources":["webpack://gdprGuard/webpack/universalModuleDefinition","webpack://gdprGuard/./src/GdprGuard.ts","webpack://gdprGuard/./src/GdprGuardGroup.ts","webpack://gdprGuard/./src/GdprManager.ts","webpack://gdprGuard/./src/GdprManagerEventHub.ts","webpack://gdprGuard/./src/GdprStorage.ts","webpack://gdprGuard/./src/builders/GdprGroupBuilder.ts","webpack://gdprGuard/./src/builders/GdprGuardBuilder.ts","webpack://gdprGuard/./src/builders/GdprManagerBuilder.ts","webpack://gdprGuard/./src/builders/builders.ts","webpack://gdprGuard/./src/gdpr_guard.ts","webpack://gdprGuard/./src/serde/GdprDeserializer.ts","webpack://gdprGuard/./src/serde/GdprSavior.ts","webpack://gdprGuard/./src/serde/GdprSerializer.ts","webpack://gdprGuard/./src/visitor.ts","webpack://gdprGuard/webpack/bootstrap","webpack://gdprGuard/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gdprGuard\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gdprGuard\"] = factory();\n\telse\n\t\troot[\"gdprGuard\"] = factory();\n})(typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : this, () => {\nreturn ","import { GdprStorage } from \"./GdprStorage\"\n\nexport interface GdprRawInto<RawRepr> {\n\t/**\n\t * Raw/simple representation of this guard\n\t */\n\traw(): RawRepr;\n}\n\n/**\n * Raw representation of a guard\n */\nexport interface GdprGuardRaw {\n\tname: string,\n\tenabled: boolean,\n\trequired: boolean,\n\tdescription: string,\n\tstorage: GdprStorage,\n}\n\n/**\n * Generic type representing a guard\n */\nexport interface GdprGuard extends GdprRawInto<GdprGuardRaw> {\n\t/**\n\t * Unique name of this guard\n\t */\n\treadonly name: string;\n\n\t/**\n\t * Whether the guard is currently enabled\n\t */\n\tenabled: boolean;\n\n\t/**\n\t * A description of what this guard does\n\t */\n\treadonly description: string;\n\n\t/**\n\t * Where this guard is stored\n\t */\n\treadonly storage: GdprStorage;\n\n\t/**\n\t * Whether this guard is required\n\t */\n\trequired: boolean;\n\n\t/**\n\t * Determine whether or not a guard is enabled\n\t * @param name The name of the guard to look for\n\t * @memberof GdprGuard\n\t */\n\tisEnabled(name: string): boolean;\n\n\t/**\n\t * Enable this guard\n\t * @returns this guard\n\t * @memberof GdprGuard\n\t */\n\tenable(): GdprGuard;\n\n\t/**\n\t * Disable this guard\n\t * @returns this guard\n\t * @memberof GdprGuard\n\t */\n\tdisable(): GdprGuard;\n\n\t/**\n\t * Toggle the enabled state of this guard\n\t * @returns this guard\n\t * @memberof GdprGuard\n\t */\n\ttoggle(): GdprGuard;\n\n\t/**\n\t * Make this guard required\n\t * @returns this guard\n\t * @memberof GdprGuard\n\t */\n\tmakeRequired(): GdprGuard;\n\n\t/**\n\t * Enable guards of the given type (this guard and sub-guards)\n\t * @param type The storage type to enable all guards for\n\t * @returns this guard\n\t * @memberof GdprGuard\n\t */\n\tenableForStorage(type: GdprStorage): GdprGuard;\n\n\t/**\n\t * Disable guards of the given type (this guard and sub-guards)\n\t * @param type The storage type to enable all guards for\n\t * @returns this guard\n\t * @memberof GdprGuard\n\t */\n\tdisableForStorage(type: GdprStorage): GdprGuard;\n\n\t/**\n\t * Toggle guards of the given type (this guard and sub-guards)\n\t * @param type The storage type to enable all guards for\n\t * @returns this guard\n\t * @memberof GdprGuard\n\t */\n\ttoggleForStorage(type: GdprStorage): GdprGuard;\n}\n\n/**\n * Factory for creating a guard\n * @param name The unique name/identifier for this guard\n * @param description The description of the guard\n * @param storage Where the data will be stored\n * @param required Whether or not it is a required guard\n * @param enabled Whether or not it is currently enabled\n */\nexport function makeGuard(name: string, description: string, storage: GdprStorage = GdprStorage.Cookie, required: boolean = false, enabled: boolean | null = null): GdprGuard {\n\treturn {\n\t\tname,\n\t\tdescription,\n\t\tstorage,\n\t\trequired,\n\t\tenabled: enabled === null ? required : enabled,\n\t\tenable() {\n\t\t\tif (!this.enabled)\n\t\t\t\tthis.toggle();\n\n\t\t\treturn this;\n\t\t},\n\t\tdisable() {\n\t\t\tif (this.enabled)\n\t\t\t\tthis.toggle();\n\n\t\t\treturn this;\n\t\t},\n\t\ttoggle() {\n\t\t\tif (!this.required)\n\t\t\t\tthis.enabled = !this.enabled;\n\t\t\treturn this;\n\t\t},\n\t\tmakeRequired() {\n\t\t\tthis.required = true;\n\t\t\tthis.enabled = true;\n\t\t\treturn this;\n\t\t},\n\t\tisEnabled(name) {\n\t\t\treturn this.name === name && this.enabled;\n\t\t},\n\t\tenableForStorage(type) {\n\t\t\tif (!this.enabled)\n\t\t\t\tthis.toggleForStorage(type);\n\t\t\treturn this;\n\t\t},\n\t\tdisableForStorage(type) {\n\t\t\tif (this.enabled)\n\t\t\t\tthis.toggleForStorage(type);\n\t\t\treturn this;\n\t\t},\n\t\ttoggleForStorage(type) {\n\t\t\tif (this.storage == type && !this.required)\n\t\t\t\tthis.toggle();\n\t\t\treturn this;\n\t\t},\n\t\traw(): GdprGuardRaw {\n\t\t\treturn JSON.parse(JSON.stringify(this));\n\t\t}\n\t};\n}\n","import { GdprGuard, GdprGuardRaw, GdprRawInto } from \"./GdprGuard\";\nimport { GdprStorage } from \"./GdprStorage\";\nimport { GdprGuardCollection } from \"./GdprGuardCollection\";\n\n/**\n * Raw representation of a guard group\n */\nexport interface GdprGuardGroupRaw extends GdprGuardRaw {\n\tguards: GdprGuardRaw[],\n}\n\n/**\n * A group of guards\n */\nexport class GdprGuardGroup implements GdprGuardCollection, GdprRawInto<GdprGuardGroupRaw> {\n\tpublic readonly storage: GdprStorage = GdprStorage.None;\n\n\t/**\n\t * Binding from guard name to guard\n\t * @protected\n\t */\n\tprotected bindings: Map<string, GdprGuard> = new Map();\n\n\t/**\n\t * Creates an instance of GdprGuardGroup.\n\t * @ignore\n\t * @param name\n\t * @param [description]\n\t * @param [enabled]\n\t * @param [required]\n\t * @memberof GdprGuardGroup\n\t */\n\tconstructor(public name: string, public description: string = \"\", public enabled: boolean = false, public required: boolean = false) {\n\t\tif (this.required)\n\t\t\tthis.enabled = true;\n\t}\n\n\t/**\n\t * Factory for creating a groupe\n\t * @static\n\t * @param name The name of the group\n\t * @param [description] The description of the group\n\t * @param [enabled=false] Whether or not the group is enabled by default\n\t * @param [required=false] Whether or not the entire group is required\n\t * @returns {GdprGuardGroup}\n\t * @memberof GdprGuardGroup\n\t */\n\tstatic for(name: string, description: string = \"\", enabled: boolean = false, required: boolean = false): GdprGuardGroup {\n\t\treturn new GdprGuardGroup(name, description, enabled, required);\n\t}\n\n\t/**\n\t * Add a guard to this group\n\t * @param {GdprGuard} guard\n\t * @returns {GdprGuardGroup}\n\t * @memberof GdprGuardGroup\n\t */\n\taddGuard(guard: GdprGuard): GdprGuardGroup {\n\t\tthis.bindings.set(guard.name, guard);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @memberof GdprGuardGroup\n\t */\n\thasGuard(name: string): boolean {\n\t\treturn this.name === name\n\t\t\t|| this.bindings.has(name)\n\t\t\t|| this.reduceSubGroupsPred(group => group.hasGuard(name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @memberof GdprGuardGroup\n\t */\n\tgetGuard(name: string): GdprGuard | null {\n\t\tif (this.name === name)\n\t\t\treturn this;\n\n\t\treturn this.bindings.get(name)\n\t\t\t?? this.reduceSubGroups(group => group.getGuard(name))\n\t\t\t?? null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @memberof GdprGuardGroup\n\t */\n\tisEnabled(name: string): boolean {\n\t\tif (this.hasGuard(name)) {\n\t\t\tconst guard = this.getGuard(name);\n\t\t\tif (guard !== null) {\n\t\t\t\treturn guard.enabled;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprGuardGroup\n\t * @returns {GdprGuardGroup}\n\t */\n\tenable(): GdprGuardGroup {\n\t\tif (this.required)\n\t\t\treturn this;\n\n\t\tthis.enabled = true;\n\t\treturn this.doForEachGuard(guard => guard.enable());\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprGuardGroup\n\t * @returns {GdprGuardGroup}\n\t */\n\tdisable(): GdprGuardGroup {\n\t\tif (this.required)\n\t\t\treturn this;\n\n\t\tthis.enabled = false;\n\t\treturn this.doForEachGuard(guard => guard.disable());\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprGuardGroup\n\t * @returns {GdprGuardGroup}\n\t */\n\ttoggle(): GdprGuardGroup {\n\t\treturn this.enabled ? this.disable() : this.enable();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprGuardGroup\n\t * @returns {GdprGuardGroup}\n\t */\n\tmakeRequired(): GdprGuardGroup {\n\t\tthis.required = true;\n\t\tthis.enabled = true;\n\t\treturn this.doForEachGuard(guard => guard.makeRequired());\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprGuardGroup\n\t */\n\tenableForStorage(type: GdprStorage): GdprGuardGroup {\n\t\tif (this.required) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.doForEachGuard(guard => {\n\t\t\tguard.enableForStorage(type);\n\t\t});\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprGuardGroup\n\t */\n\tdisableForStorage(type: GdprStorage): GdprGuardGroup {\n\t\tif (this.required) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.doForEachGuard(guard => {\n\t\t\tguard.disableForStorage(type);\n\t\t});\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprGuardGroup\n\t */\n\ttoggleForStorage(type: GdprStorage): GdprGuardGroup {\n\t\tif (this.required) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.doForEachGuard(guard => {\n\t\t\tguard.toggleForStorage(type);\n\t\t});\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprGuardGroup\n\t */\n\traw(): GdprGuardGroupRaw {\n\t\tconst ret: GdprGuardGroupRaw = {\n\t\t\tname: this.name,\n\t\t\tdescription: this.description,\n\t\t\tenabled: this.enabled,\n\t\t\trequired: this.required,\n\t\t\tstorage: this.storage,\n\t\t\tguards: [],\n\t\t};\n\n\t\tret.guards = [...this.bindings].map(([_, guard]) => guard.raw());\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Execute a callback on each guard of this group\n\t * @ignore\n\t * @protected\n\t * @param cb\n\t * @memberof GdprGuardGroup\n\t */\n\tprotected doForEachGuard(cb: (guard: GdprGuard) => any): GdprGuardGroup {\n\t\tthis.bindings.forEach(guard => cb(guard));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Shortcircuit on predicate\n\t * @ignore\n\t * @protected\n\t * @param {(group: GdprGuardCollection) => boolean} pred\n\t * @returns {boolean}\n\t * @memberof GdprManager\n\t */\n\tprotected reduceSubGroupsPred(pred: (guard: GdprGuardGroup) => boolean): boolean {\n\t\tfor (const [_, guard] of this.bindings) {\n\t\t\tif (guard instanceof GdprGuardGroup && pred(guard))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Shortcircuit on finding a matching guard\n\t * @ignore\n\t * @protected\n\t * @param extractor\n\t * @memberof GdprManager\n\t */\n\tprotected reduceSubGroups(extractor: (guard: GdprGuardCollection & GdprGuard) => GdprGuard | null): GdprGuard | null {\n\t\tfor (const [_, guard] of this.bindings) {\n\t\t\tif (!(guard instanceof GdprGuardGroup)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst extracted = extractor(guard);\n\n\t\t\tif (extracted) {\n\t\t\t\treturn extracted;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetGuards(): GdprGuard[] {\n\t\treturn [...this.bindings.values()];\n\t}\n}\n\n","import { GdprGuard, GdprGuardRaw, GdprRawInto } from \"./GdprGuard\";\nimport { GdprGuardGroup, GdprGuardGroupRaw } from \"./GdprGuardGroup\";\nimport { GdprGuardCollection } from \"./GdprGuardCollection\"\nimport { GdprStorage } from \"./GdprStorage\";\nimport { GdprManagerEventHub } from \"./GdprManagerEventHub\";\nimport { visitGdpr } from \"./visitor\";\n\n/**\n * Raw representation of a guard manager\n */\nexport interface GdprManagerRaw extends GdprGuardRaw {\n\tbannerWasShown: boolean;\n\tenabled: boolean;\n\tgroups: GdprGuardGroupRaw[];\n}\n\n\n/**\n * Manage multiple guard groups\n */\nexport class GdprManager implements GdprGuardCollection, GdprRawInto<GdprManagerRaw> {\n\t/**\n\t * Whether the banner has already been shown to the user\n\t */\n\tpublic bannerWasShown: boolean = false;\n\n\t/**\n\t * Whether the whole manager is enabled\n\t */\n\tpublic enabled: boolean = true;\n\n\t/**\n\t * A hub to attach listeners to events triggered by this manager\n\t */\n\tpublic readonly events = new GdprManagerEventHub();\n\n\t/**\n\t * A mapping from group name to the corresponding group\n\t * @protected\n\t */\n\tprotected groups: Map<string, GdprGuardGroup> = new Map();\n\n\tpublic readonly name: string = \"manager\";\n\tpublic readonly description: string = \"Manager of GDPR guard groups\";\n\tpublic readonly storage: GdprStorage = GdprStorage.None;\n\tpublic required: boolean = false;\n\n\t/**\n\t * Creates an instance of GdprManager.\n\t * @memberof GdprManager\n\t * @ignore\n\t */\n\tprotected constructor() {\n\t}\n\n\t/**\n\t * Factory for creating a gdpr manager\n\t * @static\n\t * @param {GdprGuardGroup[]} [groups=[]] The initial guard groups\n\t * @returns {GdprManager}\n\t * @memberof GdprManager\n\t */\n\tpublic static create(groups: GdprGuardGroup[] = []): GdprManager {\n\t\tconst manager = new GdprManager();\n\t\tgroups.forEach(group => manager.addGroup(group));\n\t\treturn manager;\n\t}\n\n\t/**\n\t * Mark the GDPR banner as shown and trigger enable and disable events\n\t */\n\tcloseBanner() {\n\t\tthis.bannerWasShown = true;\n\n\t\tvisitGdpr(this, {\n\t\t\tonEach: (guard: GdprGuard) => {\n\t\t\t\tif (guard.enabled) {\n\t\t\t\t\tthis.events.enable(guard.name);\n\t\t\t\t} else {\n\t\t\t\t\tthis.events.disable(guard.name);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Reset the state of the GDPR banner and show it\n\t */\n\tresetAndShowBanner() {\n\t\tthis.bannerWasShown = false;\n\t}\n\n\t/**\n\t * Create and add a group to this manager\n\t * @param {string} name The new group's name\n\t * @param {string} [description] The new group's description\n\t * @returns {GdprManager}\n\t * @memberof GdprManager\n\t */\n\tcreateGroup(name: string, description: string = \"\"): GdprManager {\n\t\treturn this.addGroup(GdprGuardGroup.for(name, description));\n\t}\n\n\n\t/**\n\t * Add a group to this manager\n\t * @param {GdprGuardGroup} category The group to add\n\t * @returns {GdprManager}\n\t * @memberof GdprManager\n\t */\n\taddGroup(category: GdprGuardGroup): GdprManager {\n\t\tthis.groups.set(category.name, category);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprManager\n\t */\n\thasGuard(name: string): boolean {\n\t\treturn this.reduceGroupsPred(group => group.hasGuard(name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprManager\n\t */\n\tgetGuard(name: string): GdprGuard | null {\n\t\tfor (const [_, group] of this.groups) {\n\t\t\tif (group.hasGuard(name))\n\t\t\t\treturn group.getGuard(name);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @memberof GdprManager\n\t */\n\thasGroup(name: string): boolean {\n\t\treturn this.reduceGroupsPred(group => group.name === name);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @memberof GdprManager\n\t */\n\tgetGroup(name: string): GdprGuardGroup | null {\n\t\tfor (const [n, group] of this.groups) {\n\t\t\tif (n === name)\n\t\t\t\treturn group;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprManager\n\t */\n\tisEnabled(name: string): boolean {\n\t\treturn this.reduceGroupsPred(group => group.isEnabled(name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprManager\n\t */\n\tenable(): GdprGuard {\n\t\tthis.enabled = true;\n\t\treturn this.forEachGroup(group => group.enable());\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprManager\n\t */\n\tdisable(): GdprGuard {\n\t\tthis.enabled = false;\n\t\treturn this.forEachGroup(group => group.disable());\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprManager\n\t */\n\ttoggle(): GdprGuard {\n\t\treturn this.enabled ? this.disable() : this.enable();\n\t}\n\n\t/**\n\t * Does nothing for a manager\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprManager\n\t */\n\tmakeRequired(): GdprGuard {\n\t\t// noop\n\t\treturn this;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprManager\n\t */\n\tenableForStorage(type: GdprStorage): GdprGuard {\n\t\treturn this.forEachGroup(group => group.enableForStorage(type));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprManager\n\t */\n\tdisableForStorage(type: GdprStorage): GdprGuard {\n\t\treturn this.forEachGroup(group => group.disableForStorage(type));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprManager\n\t */\n\ttoggleForStorage(type: GdprStorage): GdprGuard {\n\t\treturn this.forEachGroup(group => group.toggleForStorage(type));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t * @memberof GdprManager\n\t * @returns {GdprManagerRaw}\n\t */\n\traw(): GdprManagerRaw {\n\t\tconst ret: GdprManagerRaw = {\n\t\t\tbannerWasShown: this.bannerWasShown,\n\t\t\tenabled: this.enabled,\n\t\t\tgroups: [],\n\n\t\t\t// Useless, but for typechecking:\n\t\t\tname: this.name,\n\t\t\tdescription: this.description,\n\t\t\tstorage: this.storage,\n\t\t\trequired: this.required,\n\t\t};\n\n\t\tret.groups = [...this.groups.values()].map(group => group.raw());\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Shortcircuit on predicate\n\t * @ignore\n\t * @protected\n\t * @param pred\n\t * @memberof GdprManager\n\t */\n\tprotected reduceGroupsPred(pred: (group: GdprGuardGroup) => boolean): boolean {\n\t\tfor (const [_, group] of this.groups) {\n\t\t\tif (pred(group))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Execute a callback on each group of this guard\n\t * @ignore\n\t * @protected\n\t * @param cb\n\t * @memberof GdprManager\n\t */\n\tprotected forEachGroup(cb: (group: GdprGuardGroup) => any): GdprManager {\n\t\tthis.groups.forEach(group => cb(group));\n\t\treturn this;\n\t}\n\n\tgetGroups(): GdprGuardGroup[] {\n\t\treturn [...this.groups.values()];\n\t}\n}\n\n","export type GdprManagerEventHandler = () => void;\n\n/**\n * An event hub for a {@link GdprManager}'s events\n */\nexport class GdprManagerEventHub {\n\tprotected eventMap = {} as Record<string, GdprManagerEventHandler[]>;\n\n\t/**\n\t * Attach a listener for when the given guard is enabled\n\t * @param guardName - The name of the guard\n\t * @param callback - The event listener\n\t */\n\tonEnable(guardName: string, callback: GdprManagerEventHandler): this {\n\t\tthis.addListener(\"enable\", guardName, callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Attach a listener for when the given guard is disabled\n\t * @param guardName - The guard's name\n\t * @param callback - The event listener\n\t */\n\tonDisable(guardName: string, callback: GdprManagerEventHandler): this {\n\t\tthis.addListener(\"disable\", guardName, callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Enable the given guard\n\t * @param guardName - The guard's name\n\t */\n\tenable(guardName: string): this {\n\t\tthis.executeListeners(\"enable\", guardName);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Disable the given guard\n\t * @param guardName - The guard's name\n\t */\n\tdisable(guardName: string): this {\n\t\tthis.executeListeners(\"disable\", guardName);\n\t\treturn this;\n\t}\n\n\tprotected tagFor(type: string, guardName: string): string {\n\t\treturn `${type}--${guardName}`;\n\t}\n\n\tprotected addListener(type: string, guardName: string, callback: GdprManagerEventHandler) {\n\t\tconst tag = this.tagFor(type, guardName);\n\n\t\tif (!(tag in this.eventMap)) {\n\t\t\tthis.eventMap[tag] = [];\n\t\t}\n\n\t\tthis.eventMap[tag].push(callback);\n\t}\n\n\tprotected executeListeners(type: string, guardName: string) {\n\t\tconst tag = this.tagFor(type, guardName);\n\t\tthis.eventMap[tag]?.forEach(cb => cb());\n\t}\n}\n","/**\n * The types of storage concerned by GDPR\n * @enum {number}\n * @export\n */\nenum GdprStorage {\n\t/**\n\t * No storage\n\t */\n\tNone = 0b1,\n\n\t/**\n\t * Cookie-based storage\n\t */\n\tCookie = 0b10,\n\n\t/**\n\t * Storage in localStorage\n\t */\n\tLocalStorage = 0b100,\n\n\t/**\n\t * Storage in sessionStorage\n\t */\n\tSessionStorage = 0b1000,\n\n\t/**\n\t * Storage in indexedDb\n\t */\n\tIndexedDb = 0b10000,\n\n\t/**\n\t * Storage on client-side filesystem\n\t */\n\tFileSystem = 0b10000,\n\n\t/**\n\t * Storage on server (session, DB, cloud, etc...)\n\t */\n\tServerStorage = 0b10000,\n\n\t/**\n\t * All storage\n\t */\n\tAll = Cookie | LocalStorage | SessionStorage | IndexedDb | FileSystem | ServerStorage,\n}\n\nexport {\n\tGdprStorage,\n}\n","import { GdprStorage } from \"../GdprStorage\"\nimport { GdprManagerBuilder } from \"./GdprManagerBuilder\"\nimport { GdprGuard } from \"../GdprGuard\"\nimport { GdprGuardGroup } from \"../GdprGuardGroup\"\nimport { GdprGuardBuilder } from \"./GdprGuardBuilder\"\n\n/**\n * Builder for a gdpr group\n * @class GdprGroupBuilder\n * @extends {GdprManagerBuilder}\n * @export\n */\nclass GdprGroupBuilder extends GdprManagerBuilder {\n\tpublic guards: GdprGuard[] = [];\n\n\t/**\n\t * @ignore\n\t * @protected\n\t */\n\tprotected constructor(\n\t\tprotected parent: GdprManagerBuilder,\n\t\tprotected name: string,\n\t\tprotected description: string,\n\t\tstorage: GdprStorage,\n\t\tprotected enable: boolean,\n\t\tprotected require: boolean,\n\t) {\n\t\tsuper();\n\t\tthis.storage = storage;\n\t\tif (!!require)\n\t\t\tthis.enable = true;\n\t}\n\n\t/**\n\t * Factory for a group builder\n\t * @static\n\t * @param {GdprManagerBuilder} mb The parent manager builder\n\t * @param {string} name The name of the group\n\t * @param {string} [description] The description of the group\n\t * @param {?GdprStorage} [storage] The storage of the group\n\t * @param {boolean} [enabled=true] Whether or not the group should be enabled\n\t * @param {boolean} [required=true] Whether or not the group should be required\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tpublic static create(mb: GdprManagerBuilder, name: string, description: string = \"\", storage: GdprStorage | null = null, enabled: boolean = true, required: boolean = false): GdprGroupBuilder {\n\t\treturn new GdprGroupBuilder(mb, name, description, storage || GdprStorage.Cookie, enabled, required);\n\t}\n\n\tpublic startGroup(storage: GdprStorage | null = null, name: string = \"\", description: string = \"\"): GdprGroupBuilder {\n\t\treturn super.startGroup(storage || this.parent.storage, name, description);\n\t}\n\n\tpublic startRequiredGroup(storage: GdprStorage | null = null, name: string = \"\", description: string = \"\"): GdprGroupBuilder {\n\t\treturn this.startGroup(storage, name, description).required();\n\t}\n\n\t/**\n\t * End the group using the current builder state\n\t * @returns {GdprManagerBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tpublic endGroup(): GdprManagerBuilder {\n\t\tconst enable = this.require || this.enable;\n\t\tconst group = GdprGuardGroup.for(this.name, this.description, enable, this.require);\n\t\tconst guards = [...this.guards, ...this.groups];\n\t\tguards.forEach(guard => group.addGuard(guard));\n\n\t\tif (this.require)\n\t\t\tgroup.makeRequired();\n\n\t\tthis.parent.groups.push(group);\n\t\treturn this.parent;\n\t}\n\n\t/**\n\t * Set the name of the group\n\t * @param {string} name The new name for the group\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tpublic withName(name: string): GdprGroupBuilder {\n\t\treturn this.edit(b => b.name = name);\n\t}\n\n\t/**\n\t * Set the description of the group\n\t * @param {string} description The new description for the group\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tpublic withDescription(description: string): GdprGroupBuilder {\n\t\treturn this.edit(b => b.description = description);\n\t}\n\n\t/**\n\t * Set the storage of the group\n\t * @param {GdprStorage} storage The new storage for the group\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tpublic storedIn(storage: GdprStorage): GdprGroupBuilder {\n\t\treturn this.edit(b => b.storage = storage);\n\t}\n\n\t/**\n\t * Mark as enabled\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tpublic enabled(): GdprGroupBuilder {\n\t\treturn this.edit(b => b.enable = true);\n\t}\n\n\t/**\n\t * Mark as disabled\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tpublic disabled(): GdprGroupBuilder {\n\t\treturn this.edit(b => b.enable = false);\n\t}\n\n\t/**\n\t * Mark as required\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tpublic required(): GdprGroupBuilder {\n\t\treturn this.edit(b => b.require = true);\n\t}\n\n\t/**\n\t * Start adding a guard\n\t * @param {?GdprStorage} [storage] The storage for the guard (by default it uses the group's storage)\n\t * @returns {GdprGuardBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tpublic startGuard(storage: GdprStorage | null = null): GdprGuardBuilder {\n\t\treturn GdprGuardBuilder.create(this, storage || this.storage, this.enable);\n\t}\n\n\t/**\n\t * Start adding a required guard\n\t * @param {?GdprStorage} [storage] The storage for the guard (by default it uses the group's storage)\n\t * @returns {GdprGuardBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tpublic startRequiredGuard(storage: GdprStorage | null): GdprGuardBuilder {\n\t\treturn this.startGuard(storage).required();\n\t}\n\n\t/**\n\t * Add an enabled guard\n\t * @param {string} name The name of the guard\n\t * @param {string} [description] The description of the guard\n\t * @param {?GdprStorage} [storage] The storage of the guard\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tpublic withEnabledGuard(name: string, description: string = \"\", storage: GdprStorage | null = null): GdprGroupBuilder {\n\t\treturn this.startGuard(storage)\n\t\t\t.withName(name)\n\t\t\t.withDescription(description)\n\t\t\t.enabled()\n\t\t\t.endGuard();\n\t}\n\n\t/**\n\t * Add a disabled guard\n\t * @param {string} name The name of the guard\n\t * @param {string} [description] The description of the guard\n\t * @param {?GdprStorage} [storage] The storage of the guard\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tpublic withDisabledGuard(name: string, description: string = \"\", storage: GdprStorage | null = null): GdprGroupBuilder {\n\t\treturn this.startGuard(storage)\n\t\t\t.withName(name)\n\t\t\t.withDescription(description)\n\t\t\t.disabled()\n\t\t\t.endGuard();\n\t}\n\n\t/**\n\t * Edit the builder state\n\t * @ignore\n\t * @protected\n\t * @param {(builder: GdprGroupBuilder) => any} cb\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprGroupBuilder\n\t */\n\tprotected edit(cb: (builder: GdprGroupBuilder) => any): GdprGroupBuilder {\n\t\tcb(this);\n\t\treturn this;\n\t}\n}\n\nexport {\n\tGdprGroupBuilder,\n}\n","import { GdprGroupBuilder } from \"./builders\"\nimport { GdprStorage } from \"../GdprStorage\"\nimport { makeGuard } from \"../GdprGuard\";\n\n/**\n * Builder for a gdpr guard\n * @class GdprGuardBuilder\n * @export\n */\nclass GdprGuardBuilder {\n\tprotected name: string = \"\";\n\tprotected description: string = \"\";\n\n\t/**\n\t * Creates an instance of GdprGuardBuilder.\n\t * @ignore\n\t * @protected\n\t * @param {GdprGroupBuilder} parent\n\t * @param {GdprStorage} storage\n\t * @param {boolean} enable\n\t * @param {boolean} require\n\t * @memberof GdprGuardBuilder\n\t */\n\tprotected constructor(\n\t\tprotected parent: GdprGroupBuilder,\n\t\tprotected storage: GdprStorage,\n\t\tprotected enable: boolean,\n\t\tprotected require: boolean,\n\t) {\n\t\tif (require)\n\t\t\tthis.enable = true;\n\t}\n\n\t/**\n\t * Factory for creating a guard builder\n\t * @static\n\t * @param {GdprGroupBuilder} gb The parent group builder\n\t * @param {GdprStorage} [storage=GdprStorage.Cookie] The guard's storage\n\t * @param {boolean} [enabled=false] Whether or not the guard should be enabled\n\t * @param {boolean} [required=false] Whether or not the guard should be required\n\t * @returns {GdprGuardBuilder}\n\t * @memberof GdprGuardBuilder\n\t */\n\tstatic create(gb: GdprGroupBuilder, storage: GdprStorage = GdprStorage.Cookie, enabled: boolean = false, required: boolean = false): GdprGuardBuilder {\n\t\treturn new GdprGuardBuilder(gb, storage, enabled, required);\n\t}\n\n\t/**\n\t * End the guard creation with the current builder state\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprGuardBuilder\n\t */\n\tendGuard(): GdprGroupBuilder {\n\t\tconst enable = this.require || this.enable;\n\t\tconst guard = makeGuard(this.name, this.description, this.storage, this.require, enable);\n\n\t\tif (this.require)\n\t\t\tguard.makeRequired();\n\n\t\tthis.parent.guards.push(guard);\n\t\treturn this.parent;\n\t}\n\n\t/**\n\t * Set the name of the guard\n\t * @param {string} name The new name for the guard\n\t * @returns {GdprGuardBuilder}\n\t * @memberof GdprGuardBuilder\n\t */\n\twithName(name: string): GdprGuardBuilder {\n\t\treturn this.edit(b => b.name = name);\n\t}\n\n\t/**\n\t * Set the description of the guard\n\t * @param {string} description The new description for the guard\n\t * @returns {GdprGuardBuilder}\n\t * @memberof GdprGuardBuilder\n\t */\n\twithDescription(description: string): GdprGuardBuilder {\n\t\treturn this.edit(b => b.description = description);\n\t}\n\n\t/**\n\t * Mark as enabled\n\t * @returns {GdprGuardBuilder}\n\t * @memberof GdprGuardBuilder\n\t */\n\tenabled(): GdprGuardBuilder {\n\t\treturn this.edit(b => b.enable = true);\n\t}\n\n\t/**\n\t * Mark as disabled\n\t * @returns {GdprGuardBuilder}\n\t * @memberof GdprGuardBuilder\n\t */\n\tdisabled(): GdprGuardBuilder {\n\t\treturn this.edit(b => b.enable = false);\n\t}\n\n\t/**\n\t * Set the storage of the guard\n\t * @param {GdprStorage} storage The new storage for the guard\n\t * @returns {GdprGuardBuilder}\n\t * @memberof GdprGuardBuilder\n\t */\n\tstoredIn(storage: GdprStorage): GdprGuardBuilder {\n\t\treturn this.edit(b => b.storage = storage);\n\t}\n\n\t/**\n\t * Mark as required\n\t * @returns {GdprGuardBuilder}\n\t * @memberof GdprGuardBuilder\n\t */\n\trequired(): GdprGuardBuilder {\n\t\treturn this.edit(b => b.require = true);\n\t}\n\n\t/**\n\t * Edit the builder's state\n\t * @ignore\n\t * @protected\n\t * @param {(builder: GdprGuardBuilder) => any} edit\n\t * @returns {GdprGuardBuilder}\n\t * @memberof GdprGuardBuilder\n\t */\n\tprotected edit(edit: (builder: GdprGuardBuilder) => any): GdprGuardBuilder {\n\t\tedit(this);\n\t\treturn this;\n\t}\n}\n\nexport {\n\tGdprGuardBuilder,\n}\n","import { GdprGuardGroup } from \"../GdprGuardGroup\"\nimport { GdprStorage } from \"../GdprStorage\"\nimport { GdprManager } from \"../GdprManager\"\nimport { GdprGroupBuilder } from \"./builders\"\n\n/**\n * Builder for a GdprManager\n * @class GdprManagerBuilder\n * @export\n */\nclass GdprManagerBuilder {\n\tpublic storage: GdprStorage = GdprStorage.Cookie;\n\tpublic groups: GdprGuardGroup[] = [];\n\tpublic bannerWasShown: boolean = false;\n\n\t/**\n\t * Factory for a builder\n\t * @static\n\t * @returns {GdprManagerBuilder}\n\t * @memberof GdprManagerBuilder\n\t */\n\tpublic static make(): GdprManagerBuilder {\n\t\treturn new GdprManagerBuilder();\n\t}\n\n\twithBannerShown(wasShown: boolean = true) {\n\t\tthis.bannerWasShown = wasShown;\n\t}\n\n\t/**\n\t * Start a new group\n\t * @param {?GdprStorage} [storage] The storage type of the group\n\t * @param {string} [name] The name of the group\n\t * @param {string} [description] The description of the group\n\t * @param {boolean} [enabled=true] Whether or not the group is enabled\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprManagerBuilder\n\t */\n\tstartGroup(storage: GdprStorage | null = null, name: string = \"\", description: string = \"\", enabled: boolean = true): GdprGroupBuilder {\n\t\treturn GdprGroupBuilder.create(this, name, description, storage, enabled, false);\n\t}\n\n\t/**\n\t * Start a new group as required\n\t * @param {?GdprStorage} [storage] The storage type of the group\n\t * @param {string} [name] The name of the group\n\t * @param {string} [description] The description of the group\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprManagerBuilder\n\t */\n\tstartRequiredGroup(storage: GdprStorage | null = null, name: string = \"\", description: string = \"\") {\n\t\treturn this.startEnabledGroup(storage, name, description).required();\n\t}\n\n\t/**\n\t * Start a new enabled group\n\t * @param {?GdprStorage} [storage] The storage type of the group\n\t * @param {string} [name] The name of the group\n\t * @param {string} [description] The description of the group\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprManagerBuilder\n\t */\n\tstartEnabledGroup(storage: GdprStorage | null = null, name: string = \"\", description: string = \"\"): GdprGroupBuilder {\n\t\treturn this.startGroup(storage, name, description, true).enabled();\n\t}\n\n\t/**\n\t * Start a new disabled group\n\t * @param {?GdprStorage} [storage] The storage type of the group\n\t * @param {string} [name] The name of the group\n\t * @param {string} [description] The description of the group\n\t * @returns {GdprGroupBuilder}\n\t * @memberof GdprManagerBuilder\n\t */\n\tstartDisabledGroup(storage: GdprStorage | null = null, name: string = \"\", description: string = \"\"): GdprGroupBuilder {\n\t\treturn this.startGroup(storage, name, description, false).disabled();\n\t}\n\n\t/**\n\t * Build the manager from the current builder state\n\t * @returns {GdprManager}\n\t * @memberof GdprManagerBuilder\n\t */\n\tbuild(): GdprManager {\n\t\tconst manager = GdprManager.create(this.groups);\n\t\tmanager.bannerWasShown = this.bannerWasShown;\n\t\treturn manager;\n\t}\n\n\t/**\n\t * End this group's creation (no-op for manager builders)\n\t * @returns {GdprManagerBuilder}\n\t * @memberof GdprManagerBuilder\n\t */\n\tendGroup(): GdprManagerBuilder {\n\t\treturn this;\n\t}\n}\n\nexport {\n\tGdprManagerBuilder,\n}\n","export * from \"./GdprGuardBuilder\"\nexport * from \"./GdprManagerBuilder\"\nexport * from \"./GdprGroupBuilder\"","export * from \"./GdprGuard\"\r\nexport * from \"./GdprGuardGroup\"\r\nexport * from \"./GdprManager\"\r\nexport * from \"./GdprStorage\"\r\nexport * from \"./GdprManagerEventHub\"\r\nexport * from \"./visitor\"\r\nexport * from \"./builders/builders\"\r\nexport * from \"./serde/GdprSerializer\"\r\nexport * from \"./serde/GdprDeserializer\"\r\nexport * from \"./serde/GdprSavior\"\r\n\r\n/*\r\n\r\nconst $gdpr: GdprManager = GdprManagerBuilder.make()\r\n\t.startGroup(GdprStorage.Cookie, \"tracking\")\r\n\t\t.withEnabledGuard(\"Google Tags Analytics\") //cookie\r\n\t\t.withEnabledGuard(\"Company-wide Tracking\", \"Homebrewed tracking system\") //cookie\r\n\t.endGroup()\r\n\t.startGroup(GdprStorage.LocalStorage, \"styles\") //ls\r\n\t\t.startGroup().withName(\"themes\") //ls\r\n\t\t\t.withEnabledGuard(\"colors\", \"User based color scheme\") //ls\r\n\t\t\t.withEnabledGuard(\"\") //ls\r\n\t\t.endGroup()\r\n\t.endGroup()\r\n.build();\r\n\r\n*/\r\n","import { GdprManager, GdprManagerRaw } from \"../GdprManager\"\nimport { GdprStorage } from \"../GdprStorage\"\nimport { GdprGuardGroup, GdprGuardGroupRaw } from \"../GdprGuardGroup\"\nimport { GdprGuard, GdprGuardRaw, makeGuard } from \"../GdprGuard\"\n\n/*\n\tFor retro-compatibility, we do not check for\n\tthe presence of the `bannerWasShown` key\n*/\nconst managerKeys = [\"enabled\", \"groups\"];\nconst groupKeys = [\"guards\"];\nconst guardKeys = [\n\t\"name\",\n\t\"enabled\",\n\t\"required\",\n\t\"description\",\n\t\"storage\"\n];\n\nconst isManager = (raw: any): raw is GdprManagerRaw => {\n\tconst allKeys = managerKeys.every(key => key in raw);\n\treturn allKeys\n\t\t\t&& typeof raw.enabled == \"boolean\"\n\t\t\t&& Array.isArray(raw.groups);\n};\n\nconst isGroup = (raw: GdprGuardRaw|any): raw is GdprGuardGroupRaw => {\n\tconst allKeys = groupKeys.every(key => key in raw);\n\n\treturn allKeys && Array.isArray(raw.guards);\n};\n\nconst isGuard = (raw: any): raw is GdprGuardRaw => {\n\tconst allKeys = guardKeys.every(key => key in raw);\n\n\treturn allKeys\n\t\t&& typeof raw.name == \"string\"\n\t\t&& typeof raw.enabled == \"boolean\"\n\t\t&& typeof raw.required == \"boolean\"\n\t\t&& typeof raw.description == \"string\"\n\t\t&& typeof raw.storage == \"number\"\n\t\t&& raw.storage in GdprStorage;\n};\n\n/**\n * Namespace-like class that allows deserialization from raw format\n * @abstract\n * @class GdprDeserializer\n * @export\n */\nexport abstract class GdprDeserializer {\n\t/**\n\t * Deserialize a GdprManager from its raw representation\n\t * @param raw The serialized manager\n\t * @returns {?GdprManager}\n\t * @static\n\t * @memberof GdprDeserializer\n\t */\n\tstatic manager(raw: GdprManagerRaw|any): GdprManager | null {\n\t\tif (!isManager(raw))\n\t\t\treturn null;\n\n\t\tconst groups: GdprGuardGroup[] = raw.groups\n\t\t\t.map(group => this.group(group))\n\t\t\t.filter(group => group !== null) as GdprGuardGroup[];\n\n\t\tconst manager = GdprManager.create([]);\n\t\tmanager.enabled = !!raw.enabled;\n\t\tmanager.bannerWasShown = !!raw.bannerWasShown;\n\n\t\tgroups.forEach(group => manager.addGroup(group));\n\t\treturn manager;\n\t}\n\n\t/**\n\t * Deserialize a GdprGuardGroup from its raw representation\n\t * @param {any} raw The serialized group\n\t * @returns {?GdprGuardGroup}\n\t * @static\n\t * @memberof GdprDeserializer\n\t */\n\tstatic group(raw: GdprGuardGroupRaw|any): GdprGuardGroup | null {\n\t\tconst guard: GdprGuard | null = this.guard(raw);\n\t\tif (guard === null)\n\t\t\treturn null;\n\n\t\tif (!isGroup(raw))\n\t\t\treturn null;\n\n\t\tconst group = GdprGuardGroup.for(\n\t\t\tguard.name,\n\t\t\tguard.description,\n\t\t\tguard.enabled,\n\t\t\tguard.required\n\t\t);\n\n\n\t\tconst guards: GdprGuard[] = raw.guards\n\t\t\t.map((guard: GdprGuardRaw) => groupKeys.every(key => key in guard) ? this.group(guard) : this.guard(guard))\n\t\t\t.filter((guard: GdprGuard|null): guard is GdprGuard => guard !== null);\n\n\t\t// if (!guards.length)\n\t\t// \treturn null;\n\n\t\tguards.forEach(guard => group.addGuard(guard));\n\t\treturn group;\n\t}\n\n\t/**\n\t * Deserialize a GdprGuard from its raw representation\n\t * @param {any} raw The serialized guard\n\t * @returns {?GdprGuard}\n\t * @static\n\t * @memberof GdprDeserializer\n\t */\n\tstatic guard(raw: GdprGuardRaw|any): GdprGuard | null {\n\t\treturn !isGuard(raw) ? null : makeGuard(\n\t\t\traw.name,\n\t\t\traw.description,\n\t\t\traw.storage as GdprStorage,\n\t\t\t!!raw.required,\n\t\t\t!!raw.enabled\n\t\t);\n\t}\n}\n","import { GdprManager, GdprManagerRaw } from \"../GdprManager\";\n\n/**\n * Factory function for a GdprManager\n * @typedef GdprManagerFactory\n * @export\n */\nexport type GdprManagerFactory = () => Promise<GdprManager>;\n\n/**\n * Handle saving/restoring/checking semantics\n * @interface GdprSavior\n * @export\n */\nexport interface GdprSavior {\n\t/**\n\t * Restore the manager (saved state)\n\t * @param shouldUpdate - Whether it should update its savior internals (should default to true)\n\t */\n\trestore(shouldUpdate?: boolean): Promise<GdprManager | null>;\n\n\t/**\n\t * Determine whether there is already an existing manager (saved state)\n\t * @param shouldUpdate - Whether it should update its savior internals (should default to true)\n\t */\n\texists(shouldUpdate?: boolean): Promise<boolean>;\n\n\t/**\n\t * Restore the manager or create one using the factory\n\t * @param factory - Factory to create a manager (default manager state)\n\t * @warning This should not store/save the manager before returning it\n\t */\n\trestoreOrCreate(factory: GdprManagerFactory): Promise<GdprManager>;\n\n\t/**\n\t * Overwrite the saved state of the manager\n\t * @param manager - The manager to store (state to save)\n\t */\n\tstore(manager: GdprManagerRaw): Promise<boolean>;\n\n\t/**\n\t * Store the manager state if none is already save\n\t * @param manager - The manager to store (state to save)\n\t */\n\tstoreIfNotExists(manager: GdprManagerRaw): Promise<boolean>;\n\n\t/**\n\t * Handle shared state updates\n\t * @param manager - The new manager to use\n\t */\n\tupdateSharedManager(manager: GdprManager): Promise<void>;\n\n\t/**\n\t * Check if there is an existing manager state (should rely on GdprSavior#exists)\n\t */\n\tcheck(): Promise<void>;\n}\n\nexport abstract class GdprSaviorAdapter implements GdprSavior {\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tpublic abstract restore(shouldUpdate?: boolean): Promise<GdprManager | null>;\n\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tpublic abstract store(manager: GdprManagerRaw): Promise<boolean>;\n\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tpublic abstract updateSharedManager(manager: GdprManager): Promise<void>;\n\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tpublic async exists(shouldUpdate: boolean = true): Promise<boolean> {\n\t\tconst restored = await this.restore(shouldUpdate);\n\t\treturn restored !== null;\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tpublic async storeIfNotExists(manager: GdprManagerRaw): Promise<boolean> {\n\t\tconst exists = await this.exists();\n\t\treturn exists ? true : this.store(manager);\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tpublic async restoreOrCreate(factory: GdprManagerFactory): Promise<GdprManager> {\n\t\tconst restored = await this.restore();\n\n\t\tif (!restored) {\n\t\t\tconst generated = await factory();\n\t\t\tthis.updateSharedManager(generated);\n\n\t\t\tif (generated.bannerWasShown) {\n\t\t\t\tgenerated.closeBanner();\n\t\t\t}\n\n\t\t\treturn generated;\n\t\t}\n\n\t\tif (restored.bannerWasShown) {\n\t\t\trestored.closeBanner();\n\t\t}\n\n\t\treturn restored;\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tpublic async check(): Promise<void> {\n\t\tawait Promise.resolve();\n\n\t\tawait this.exists(true);\n\t}\n}\n","import { GdprGuard, GdprGuardRaw } from \"../GdprGuard\"\n\n/**\n * A namespace-like class that allows serialization of gdpr objects\n * @abstract\n * @class GdprSerializer\n * @export\n */\nexport class GdprSerializer {\n\t/**\n\t * Serialize a GdprGuard (or its subtypes) to its raw format (POD)\n\t * @static\n\t * @param {GdprGuard} obj The object to serialize\n\t * @returns {(object|GdprGuardRaw)}\n\t * @memberof GdprSerializer\n\t */\n\tstatic serialize(obj: GdprGuard): object | GdprGuardRaw {\n\t\treturn obj.raw();\n\t}\n}\n","import { GdprGuard } from \"./GdprGuard\";\nimport { GdprManager } from \"./GdprManager\";\nimport { GdprGuardGroup } from \"./GdprGuardGroup\";\n\nexport interface GdprVisitor {\n\t/**\n\t * Callback for when you reach a manager in the tree\n\t * @param manager The manager currently being visited\n\t */\n\tonManager(manager: GdprManager): void;\n\n\t/**\n\t * Callback for when you reach a group in the tree\n\t * @param group The group currently being visited\n\t */\n\tonGroup(group: GdprGuardGroup): void;\n\n\t/**\n\t * Callback for when you reach a (leaf) guard in the tree\n\t * @param guard The group currently being visited\n\t */\n\tonGuard(guard: GdprGuard): void;\n\n\t/**\n\t * Callback called on each item\n\t * @param guard The guard currently being visited\n\t */\n\tonEach(guard: GdprGuard|GdprManager): void;\n}\n\n/**\n * Visit the GDPR structure\n * @param guard The root of the GDPR structure to visit\n * @param {Partial<GdprVisitor>} visitor\n */\nexport const visitGdpr = (guard: GdprGuard|GdprManager, {\n\tonManager = () => {},\n\tonGroup = () => {},\n\tonGuard = () => {},\n\tonEach = () => {},\n}: Partial<GdprVisitor> = {}) => {\n\tconst visitor = {\n\t\tonManager,\n\t\tonGroup,\n\t\tonGuard,\n\t\tonEach,\n\t};\n\n\tif(guard instanceof GdprManager) {\n\t\tonManager(guard);\n\t\tonEach(guard);\n\n\t\tguard.getGroups()\n\t\t\t.forEach(group => visitGdpr(group, visitor))\n\t} else if (guard instanceof GdprGuardGroup) {\n\t\tonGroup(guard);\n\t\tonEach(guard);\n\n\t\tguard.getGuards()\n\t\t\t.forEach(guard => visitGdpr(guard, visitor));\n\t} else {\n\t\tonGuard(guard);\n\t\tonEach(guard);\n\t}\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(93);\n"],"names":["root","factory","exports","module","define","amd","self","window","this","name","description","storage","required","enabled","GdprStorage","Cookie","enable","toggle","disable","makeRequired","isEnabled","enableForStorage","type","toggleForStorage","disableForStorage","raw","JSON","parse","stringify","None","bindings","Map","for","GdprGuardGroup","addGuard","guard","set","hasGuard","has","reduceSubGroupsPred","group","getGuard","get","reduceSubGroups","doForEachGuard","ret","guards","map","cb","forEach","pred","extractor","extracted","getGuards","values","bannerWasShown","events","GdprManagerEventHub","groups","create","manager","GdprManager","addGroup","closeBanner","visitGdpr","onEach","resetAndShowBanner","createGroup","category","reduceGroupsPred","hasGroup","getGroup","n","forEachGroup","getGroups","eventMap","onEnable","guardName","callback","addListener","onDisable","executeListeners","tagFor","tag","push","parent","require","mb","GdprGroupBuilder","startGroup","startRequiredGroup","endGroup","withName","edit","b","withDescription","storedIn","disabled","startGuard","GdprGuardBuilder","startRequiredGuard","withEnabledGuard","endGuard","withDisabledGuard","GdprManagerBuilder","gb","makeGuard","make","withBannerShown","wasShown","startEnabledGroup","startDisabledGroup","build","managerKeys","groupKeys","guardKeys","every","key","Array","isArray","isManager","filter","isGroup","isGuard","GdprDeserializer","exists","shouldUpdate","restore","storeIfNotExists","store","restoreOrCreate","restored","generated","updateSharedManager","check","Promise","resolve","GdprSaviorAdapter","serialize","obj","GdprSerializer","onManager","onGroup","onGuard","visitor","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}